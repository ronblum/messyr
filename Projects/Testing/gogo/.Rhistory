shiny::runApp('aoao')
plot(cars)
plot(cars)
install.packages("bookdown")
library(tibble)
?tibble
library(tibble)
?tibble
library(DBI)
con <- dbConnect(odbc::odbc(), "PostgreSQL (DSN)", timeout = 10)
library(DBI)
con <- dbConnect(odbc::odbc(), "PostgreSQL (DSN)", timeout = 10)
library(DBI)
con <- dbConnect(odbc::odbc(), "PostgreSQL (DSN)", timeout = 10)
packageVersion("odbc")
shiny::runGadget(sparklyr::connection_spark_shinyapp(), viewer = .rs.embeddedViewer)
shiny::runGadget(sparklyr::connection_spark_shinyapp(), viewer = .rs.embeddedViewer)
library(sparklyr)
library(dplyr)
sc <- spark_connect(master = "local")
https://secure.actblue.com/donate/rocky-horror
library(sparklyr)
library(dplyr)
sc <- spark_connect(master = "local")
shiny::runGadget(pins::ui_connection_create(), viewer = .rs.embeddedViewer)
pins::board_register("github")
library(DBI)
con <- dbConnect(odbc::odbc(), "Teradata (DSN)", timeout = 10)
test <- function() {}
"test"
'unexpected token ->
' -> x
library(dplyr)   # pipes
library(ggplot2) # plotting
library(gt)      # tables
mtcars
dat <- mtcars %>% count(cyl)
gt(dat)
mtcars %>% ggplot(aes(cyl, disp)) +
geom_point()
y <- 1
y
z
'unexpected token ->
' -> x
str(x)
str(iris)
knitr::opts_chunk$set(echo = TRUE)
summary(cars)
knitr::opts_chunk$set(echo = TRUE)
summary(cars)
plot(pressure)
summary(cars)
x <- 1
x
knitr::opts_chunk$set(echo = TRUE)
summary(cars)
knitr::opts_chunk$set(echo = TRUE)
View(mtcars)
x <- mtcars
d3tree2(data = NULL, rootname = NULL, celltext = "name", id = "id",
valueField = "size", clickAction = NULL, width = NULL, height = NULL)
install.packages("d3tree2")
install.packages("d3Tree")
d3tree2(data = NULL, rootname = NULL, celltext = "name", id = "id",
valueField = "size", clickAction = NULL, width = NULL, height = NULL)
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
library(testthat)
test_that("Sample tests",
{
expect_equal(1, 1)
})
test_that("Sample tests",
{
expect_equal(1, 1)
})
